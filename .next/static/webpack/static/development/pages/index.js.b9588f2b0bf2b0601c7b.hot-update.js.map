{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.b9588f2b0bf2b0601c7b.hot-update.js","sources":["webpack:///./components/List.js"],"sourcesContent":["import React, {useContext, useState, useEffect} from 'react'\r\nimport ApiContext from '../context/ApiContext'\r\nimport {\r\n    Row,\r\n    Col,\r\n    Card, CardText, CardBody,\r\n    CardTitle,\r\n    FormGroup,Label, Input, Pagination, PaginationItem, PaginationLink\r\n} from 'reactstrap'\r\n\r\nfunction List() {\r\n    const {list, setlist} = useContext(ApiContext)\r\n    const [listing, setlisting] = useState([]);\r\n    const [fetchData, setfetchData] = useState(false);\r\n    const [limit, setlimit] = useState(1)\r\n    const [stopscroll, setstopscroll] = useState(false)\r\n    const [page, setpage] = useState(1)\r\n    const [type, settype] = useState(null)\r\n\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const toggle = () => setDropdownOpen(prevState => !prevState);\r\n\r\n\r\n    useEffect(() => {\r\n        if (list) {\r\n            let x = list;\r\n            x = x.slice(0,20)\r\n            setlisting(x)\r\n        }\r\n    }, [list])\r\n\r\n    useEffect(() => {\r\n        if (!fetchData) return;\r\n        fetchMoreListItems(20);\r\n    }, [fetchData]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n    }, []);\r\n\r\n    const handleScroll = () => {\r\n        let d = document.getElementById('getScroll');\r\n\r\n        // console.log(window.innerHeight + document.documentElement.scrollTop);\r\n        // console.log(document.documentElement.offsetHeight + 100);\r\n        if (window.innerHeight + document.documentElement.scrollTop >= 100 + document.documentElement.offsetHeight || fetchData){ //set top 100px\r\n            setfetchData(true);\r\n        }\r\n    }\r\n\r\n    const fetchMoreListItems = (q) => {\r\n        setTimeout(() => {\r\n            console.log(limit)\r\n            let l = listing.length;\r\n            let x = list;\r\n            let y = q \r\n            let z = limit * 20\r\n            x = x.slice(z,z + 20)\r\n            if (x.length == 0){\r\n                setstopscroll(true)\r\n            }else{\r\n                setlisting(prevState => [...prevState,...x]);\r\n                setfetchData(false);\r\n                setlimit((x) => x+1)\r\n            };\r\n            \r\n        }, 2000);\r\n    }\r\n    \r\n    useEffect(() => {\r\n        setlisting([])\r\n        setlist(type, page);\r\n    }, [page])\r\n\r\n    const clickType = (typex) =>{\r\n        let type = typex;\r\n        settype(type)\r\n        setlisting([])\r\n        setlist(type, page);\r\n    }\r\n    return (\r\n        <Row>\r\n            <Col sm=\"12\" xs=\"12\" md=\"12\">\r\n            <div style={{float:'left', marginBottom:'10px'}}>\r\n                <FormGroup>\r\n                    <Label for=\"selectSort\">Sort</Label>\r\n                    <Input type=\"select\" id=\"selectSort\" onChange={(e)=>clickType(e.target.value)}>\r\n                    <option value={null}>Select Sort</option>\r\n                    <option value={'size'}>Sort Size</option>\r\n                    <option value={'price'}>Sort Price</option>\r\n                    <option value={'date'}>Sort Date</option>\r\n                    </Input>\r\n                </FormGroup>\r\n            </div>\r\n            <div style={{float:'right', marginBottom:'10px'}}>\r\n                <Pagination aria-label=\"Paging\">\r\n                    {\r\n                        Array.apply(null, Array(9)).map((v,i) => {\r\n                            let x = i + 1\r\n                            return(\r\n                                <PaginationItem key={i} className={page == x ? 'active':''}>\r\n                                    <PaginationLink  onClick={()=>setpage(x)}>\r\n                                    {x}\r\n                                    </PaginationLink>\r\n                                </PaginationItem>\r\n                            )\r\n                        })\r\n                    }\r\n                    \r\n                </Pagination>\r\n            </div>\r\n            </Col>\r\n        {   \r\n            listing.map((v,i) => {\r\n                let size = `${v.size}px`;\r\n                let cents = v.price / 100\r\n                cents = `$ ${cents.toFixed(2)}`\r\n                let finalDate = null\r\n                let oldDate = new Date(v.date);\r\n                let today = new Date()\r\n                let weekAgo = new Date()\r\n                let week = today.getDate() - 7 ;\r\n                weekAgo.setDate(week)\r\n                if (oldDate.getTime() > weekAgo.getTime() && oldDate.getTime() < today.getTime() ) {\r\n                    let diff = ( today.getTime() - oldDate.getTime() ) / (1000 * 3600 * 24);\r\n                    diff = Math.round(diff)\r\n                    finalDate = `${diff} days ago`\r\n                }else{\r\n                    let day = oldDate.getDate();\r\n                    let month = oldDate.getMonth() + 1;\r\n                    let year = oldDate.getFullYear();\r\n\r\n                    finalDate = `${day}/${month}/${year}`\r\n                }\r\n\r\n                \r\n\r\n                return(\r\n                    <Col sm=\"6\" xs=\"6\" md=\"4\" key={i} style={{cursor:'pointer'}} >\r\n                        <Card style={{height:'200px'}} >\r\n                            <CardBody style={{padding:'10px'}}>\r\n                                <CardTitle style={{fontSize:size,lineHeight:'3',textAlign:'center',letterSpacing:'0',color:'#4d4d4d', fontWeight:'bold'}}>{v.face}</CardTitle>\r\n                                <CardText style={{position:\"absolute\",bottom:'20px',color:'#E01A1A',fontSize:'14px', fontWeight:'bold'}}>Size: {size}</CardText>\r\n                                <CardText style={{position:\"absolute\",bottom:'3px',color:'#E01A1A',fontSize:'14px', fontWeight:'bold'}}>Price: {cents}</CardText>\r\n                                <CardText style={{position:\"absolute\",bottom:'0',color:'#E01A1A',fontSize:'14px', fontWeight:'bold'}}>Date: {finalDate}</CardText>\r\n                            </CardBody>\r\n                        </Card> \r\n                        <br/>  \r\n                        \r\n\r\n                    </Col>\r\n                )\r\n            })\r\n        }\r\n        { stopscroll == false && fetchData && 'Loading....' }\r\n        {listing.length == 0 && 'Loading...'}\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default List\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAMA;AACA;AACA;;;;A","sourceRoot":""}