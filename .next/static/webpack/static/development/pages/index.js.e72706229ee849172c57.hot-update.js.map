{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.e72706229ee849172c57.hot-update.js","sources":["webpack:///./components/List.js"],"sourcesContent":["import React, {useContext, useState, useEffect} from 'react'\r\nimport ApiContext from '../context/ApiContext'\r\nimport {\r\n    Row,\r\n    Col,\r\n    Container,\r\n    Card, CardImg, CardText, CardBody,\r\n  CardTitle, CardSubtitle\r\n} from 'reactstrap'\r\n\r\nfunction List() {\r\n    const {list} = useContext(ApiContext)\r\n    const [listing, setlisting] = useState([]);\r\n    const [fetchData, setfetchData] = useState(false);\r\n    const [limit, setlimit] = useState(1)\r\n\r\n    useEffect(() => {\r\n        if (list) {\r\n            let x = list;\r\n            x = x.slice(0,20)\r\n            setlisting(x)\r\n        }\r\n    }, [list])\r\n\r\n    useEffect(() => {\r\n        if (!fetchData) return;\r\n        fetchMoreListItems(20);\r\n    }, [fetchData]);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('scroll', handleScroll);\r\n        return () => window.removeEventListener('scroll', handleScroll);\r\n    }, []);\r\n\r\n    function handleScroll() {\r\n        if (window.innerHeight + document.documentElement.scrollTop !== document.documentElement.offsetHeight || limit){\r\n            \r\n            setfetchData(true);\r\n        }\r\n    }\r\n\r\n    function fetchMoreListItems(q) {\r\n        setTimeout(() => {\r\n            console.log(limit)\r\n            let l = listing.length;\r\n            let x = list;\r\n            let y = q \r\n            let z = limit * 20\r\n            x = x.slice(z,z + 20)\r\n            console.log(x)\r\n            setlisting(prevState => [...prevState,...x]);\r\n            setfetchData(false);\r\n            setlimit((x) => x+1)\r\n        }, 2000);\r\n    }\r\n\r\n    function clickList(i, index){\r\n        setId(i)\r\n\r\n        Router.push(`/view?id=${i}`)\r\n    }\r\n    return (\r\n        <Row>\r\n        {\r\n        listing.map((v,i) => {\r\n            let size = `${v.size}px`;\r\n            let cents = v.price / 100\r\n            cents = `$ ${cents.toFixed(2)}`\r\n            let finalDate = null\r\n            let oldDate = new Date(v.date);\r\n            let today = new Date()\r\n            let weekAgo = new Date()\r\n            let week = today.getDate() - 7 ;\r\n            weekAgo.setDate(week)\r\n            if (oldDate.getTime() > weekAgo.getTime() && oldDate.getTime() < today.getTime() ) {\r\n                let diff = ( today.getTime() - oldDate.getTime() ) / (1000 * 3600 * 24);\r\n                diff = Math.round(diff)\r\n                finalDate = `${diff} days ago`\r\n            }else{\r\n                let day = oldDate.getDate();\r\n                let month = oldDate.getMonth() + 1;\r\n                let year = oldDate.getFullYear();\r\n\r\n                finalDate = `${day}/${month}/${year}`\r\n            }\r\n\r\n            \r\n\r\n            return(\r\n                <Col sm=\"6\" xs=\"6\" md=\"3\" key={i} style={{cursor:'pointer'}} onClick={() => clickList(v.id,i)}>\r\n                    <Card style={{height:'200px'}} >\r\n                        <CardBody style={{padding:'10px'}}>\r\n                            <CardTitle style={{fontSize:size,lineHeight:'3',textAlign:'center',letterSpacing:'0',color:'#4d4d4d', fontWeight:'bold'}}>{v.face}</CardTitle>\r\n                            <CardText style={{position:\"absolute\",bottom:'20px',color:'#E01A1A',fontSize:'14px', fontWeight:'bold'}}>Size: {size}</CardText>\r\n                            <CardText style={{position:\"absolute\",bottom:'3px',color:'#E01A1A',fontSize:'14px', fontWeight:'bold'}}>Price: {cents}</CardText>\r\n                            <CardText style={{position:\"absolute\",bottom:'0',color:'#E01A1A',fontSize:'14px', fontWeight:'bold'}}>Date: {finalDate}</CardText>\r\n                        </CardBody>\r\n                    </Card> \r\n                    <br/>  \r\n                </Col>\r\n            )\r\n        })\r\n        }\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default List\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAIA;AACA;AACA;;;;A","sourceRoot":""}